# ? Main part of the build system

message(STATUS "Project license: \"${MENIX_LICENSE}\"")

# Export compile commands.
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Cross-compile flags.
set(CMAKE_C_COMPILER_WORKS TRUE)
set(CMAKE_CROSSCOMPILING TRUE)

# Common build system functionality.
set(MENIX_UTIL_PATH ${MENIX_SRC}/toolchain/util.cmake)
include(${MENIX_UTIL_PATH})

# Configuration file. Create one if it doesn't exist.
set(MENIX_CONFIG_SRC ${MENIX_SRC}/config.cmake)

if(NOT EXISTS ${MENIX_CONFIG_SRC})
	file(WRITE ${MENIX_CONFIG_SRC} "# Build configuration\n\n")
else()
	set(MENIX_HAS_CONFIG TRUE)
endif()

set(MENIX_CONFIG ${MENIX_SRC}/include/generated/config.h)
file(WRITE ${MENIX_CONFIG} "#pragma once\n// This file is automatically generated!\n\n")

# Module configuration file.
set(MENIX_MODULES ${MENIX_SRC}/include/generated/exports.h)
file(WRITE ${MENIX_MODULES} "#pragma once\n// This file is automatically generated!\n\n")

# Strip the kernel if we're building for smallest size.
if(NOT DEFINED CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Debug)
	message(STATUS "Building kernel with debug info (unoptimized)...")
endif()

if(${CMAKE_BUILD_TYPE} STREQUAL MinSizeRel OR ${CMAKE_BUILD_TYPE} STREQUAL Release)
	message(STATUS "Building optimized kernel...")
	add_link_options(-s)
endif()

# Compile time definitions
add_compile_definitions(MENIX_VERSION="${MENIX_VERSION}")
add_compile_definitions(MENIX_ARCH="${MENIX_ARCH}")

# Common build arguments
add_compile_options(-Wall -Wno-unused-command-line-argument)
