# ? Main configuration file

cmake_minimum_required(VERSION 3.25)

# Current version.
set(MENIX_VERSION "0.1.1")

# Project root path.
set(MENIX_SRC ${CMAKE_CURRENT_SOURCE_DIR})

# Project license
set(MENIX_LICENSE "LGPL")

# Target architecture.
if(NOT DEFINED MENIX_ARCH)
	# Default to x86 if none given.
	set(MENIX_ARCH "x86")
	message(STATUS "Using \"${MENIX_ARCH}\" as default architecture")
endif()

set(CMAKE_C_STANDARD 23)
set(CMAKE_TOOLCHAIN_FILE ${MENIX_SRC}/toolchain/arch/${MENIX_ARCH}.cmake)

# Cross-compile flags.
set(CMAKE_C_COMPILER_WORKS TRUE)
set(CMAKE_CROSSCOMPILING TRUE)

# Common build system functionality.
set(MENIX_UTIL_PATH ${MENIX_SRC}/toolchain/util.cmake)
include(${MENIX_UTIL_PATH})

# Configuration file. Create one if it doesn't exist.
set(MENIX_CONFIG_SRC ${MENIX_SRC}/config.cmake)

if(NOT EXISTS ${MENIX_CONFIG_SRC})
	file(WRITE ${MENIX_CONFIG_SRC} "# Build configuration\n\n")
else()
	set(MENIX_HAS_CONFIG TRUE)
endif()

set(MENIX_CONFIG ${MENIX_SRC}/include/generated/config.h)
file(WRITE ${MENIX_CONFIG} "#pragma once\n// This file is automatically generated!\n\n")

# Module configuration file.
set(MENIX_MODULES ${MENIX_SRC}/include/generated/exports.h)
file(WRITE ${MENIX_MODULES} "#pragma once\n// This file is automatically generated!\n\n")

# Strip the kernel if we're building for smallest size.
if(${CMAKE_BUILD_TYPE} STREQUAL MinSizeRel OR ${CMAKE_BUILD_TYPE} STREQUAL Release)
	message(STATUS "Stripping kernel...")
	add_link_options(-s)
endif()

# Compile time definitions
add_compile_definitions(MENIX_VERSION="${MENIX_VERSION}")
add_compile_definitions(MENIX_ARCH="${MENIX_ARCH}")

project(menix-kernel C ASM)

add_subdirectory(kernel)

# Write kernel version
get_target_property(MENIX_BIN_DIR menix RUNTIME_OUTPUT_DIRECTORY)
file(WRITE ${MENIX_BIN_DIR}/version "${MENIX_VERSION} (${MENIX_ARCH})")